webpackJsonp([10],{972:function(n,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var t=r(0),o=r.n(t),c=r(414),a=r.n(c);e.default=o.a.createElement(a.a,{bgColor:"secondary",transition:["fade"],lang:"js",code:"// KO\nexport function echo(input: string) {\n  return input;\n}\n\n// OK\nexport function echo(input: string): string {\n  return input;\n}\n\n// KO\nconst data: Record<string, string> = {}\n\n// OK\nconst data = new Map<string, string>();\n\n// OK\ntype Func = (x: string | null) => number;\n\n// KO\ntype Func = (x: string | number) => number;\n\n\n// Pas de type erasure :-)\n\nclass GenericFactory<T> {\n\n  create(): T {\n    return instantiate<T>();\n  }\n}\n\nconst factory = new GenericFactory<...>();\ntype Config = Map<string, number>;\nconst factory = new GenericFactory<Config>();\nconst map = factory.create();\nmap.set('maClef', 42);\n\n\n// Surcharge d'op\xe9rateurs\n\nclass ComplexNumber {\n\n  constructor(\n    public real: f64, \n    public imaginary: f64) {}\n\n  toString(): string {\n    return \n    `${this.real} + i${this.imaginary}`;\n  }\n\n  @operator(\"+\")\n  add(other: ComplexNumber): ComplexNumber {\n    return new ComplexNumber(\n      this.real + other.real, \n      this.imaginary + other.imaginary\n    );\n  }\n} \n\nconst c1 = new ComplexNumber(12, 42);\nconst c2 = new ComplexNumber(10, 2);\nconst c3 = c1 + c2;\ntrace(c3.toString()); \n// trace: 22.0 + i44.0\n\n",fit:!0,ranges:[{loc:[0,4]},{loc:[5,9]},{loc:[10,12]},{loc:[13,15]},{loc:[16,18]},{loc:[19,21]},{loc:[23,24]},{loc:[23,31]},{loc:[23,33]},{loc:[33,35]},{loc:[33,37]},{loc:[38,51]},{loc:[52,66]}],showLineNumbers:!0})}});
//# sourceMappingURL=10.2e9d8c0b.chunk.js.map